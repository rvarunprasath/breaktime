package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Interest;
import com.example.demo.model.Payload;
import com.example.demo.model.User;
import com.example.demo.model.User_Interests;
import com.example.demo.repository.InterestRepo;
import com.example.demo.repository.UserInterestRepo;
import com.example.demo.repository.UserRepository;


@RestController
@CrossOrigin("*")
public class MainController {

  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
private UserRepository userRepository;
  @Autowired
private InterestRepo interest_repo;
  
  @Autowired
private UserInterestRepo userinterest_repo;
  
@PostMapping(path="/addUser") // Map ONLY POST Requests
public @ResponseBody String addNewUser (@RequestBody User user
) {
// @ResponseBody means the returned String is the response, not a view name
// @RequestParam means it is a parameter from the GET or POST request

	List<User>  u = userRepository.findByEmail(user.getEmail());
	if(u==null)
	{
		userRepository.save(user);
	}
	else 
	{
		return " User Exists";
	}
return "Saved";
}

@PostMapping(path="/addInterest") // Map ONLY POST Requests
public @ResponseBody String addNInterest (@RequestBody Interest i
) {
// @ResponseBody means the returned String is the response, not a view name
// @RequestParam means it is a parameter from the GET or POST request

interest_repo.save(i);
return "Saved";
}



@PostMapping(path="/addPayload") // Map ONLY POST Requests
public @ResponseBody String addPayload (@RequestBody Payload p
) {
// @ResponseBody means the returned String is the response, not a view name
// @RequestParam means it is a parameter from the GET or POST request

System.out.println(p.getEmail());
System.out.println(p.getInterest_ids());
List<User>  u =userRepository.findByEmail(p.getEmail());
int u_id= u.get(0).getId();
for (int p1 : p.getInterest_ids()) {
	User_Interests ui = new User_Interests(u_id,p1);
	userinterest_repo.save(ui);
}
return "Saved";
}







@PostMapping(path="/login") // Map ONLY POST Requests
public boolean addNewUser (String email,String password
) {
// @ResponseBody means the returned String is the response, not a view name
// @RequestParam means it is a parameter from the GET or POST request

	return true;
//	List<User>  u = userRepository.findByEmail(email);
//if(u!=null)
//{
//	
//	if(u.get(0).getPassword()!=password)
//	{
//		System.out.println("Wrong password");
//	}
//	else
//	{
//		System.out.println(u.toString());
//	}
//	return true;
//}
//else 
//return false;
}

@GetMapping(path="/all")
public @ResponseBody Iterable<User> getAllUsers() {
// This returns a JSON or XML with the users
return userRepository.findAll();
}

  @GetMapping("/hello")
  public  String hello() {
    // This returns a JSON or XML with the users
    return "hello";
  }
}